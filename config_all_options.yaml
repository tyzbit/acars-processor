# yaml-language-server: $schema=./schema.json
# This file (and schema.json) are automatically generated 
# from the code by running ./acars-processor -s

# These control acars-processor itself
ACARSProcessorSettings:
    # Force whether or not color output is used.
    ColorOutput: true
    # Database configuration
    Database:
        # Whether or not to use a database to save messages.
        Enabled: false
        # Type of database to use
        Type: sqlite
        # Connection string (if using an external database)
        ConnectionString: user:pass@tcp(127.0.0.1:3306)/dbname?charset=utf8mb4&parseTime=True&loc=Local
        # Path to the database file (if using SQLITE). If set to an empty string (""), database will be in-memory only.
        SQLiteDatabasePath: ./messages.db
    # Set logging verbosity.
    LogLevel: info
    # Whether to refrain from printing timestamps in logs.
    LogHideTimestamps: false
    # ACARSHub connection settings.
    ACARSHub:
        # ACARS-specific settings when connecting to ACARSHub.
        ACARS:
            # IP or DNS to your ACARSHub instance serving JSON data from a particular port.
            Host: acarshub
            # ACARS JSON port.
            Port: 15550
        # VDLM2-specific settings when connecting to ACARSHub.
        VDLM2:
            # IP or DNS to your ACARSHub instance serving JSON data from a particular port.
            Host: acarshub
            # VDLM2 JSON port.
            Port: 15555
        # Maximum number of requests from ACARSHub to process at once.
        MaxConcurrentRequests: 0
# Actions to take on messages in the order they should be taken.
Steps:
    - # Apply one or more filters in this step
      Filter:
        # Built-in filters
        Builtin:
            # Whether or not to filter the message if the filter has an error
            FilterOnFailure: false
            # Generic Filters
            # Only process messages with text included.
            HasText: true
            # Only process messages that have this tail code.
            TailCode: N999AP
            # Only process messages that have this flight number.
            FlightNumber: N999AP
            # Only process messages that have ASS Status.
            ASSStatus: anything
            # Only process messages that were received above this signal strength (in dBm).
            AboveSignaldBm: -9.9
            # Only process messages that were received below this signal strength (in dBm).
            BelowSignaldBm: -9.9
            # Only process messages received on this frequency.
            Frequency: 136.95
            # Only process messages with this station ID.
            StationID: N12346
            # Only process messages that were from a ground-based transmitter - determined by the presence (from aircraft) or lack of (from ground) a flight number.
            FromTower: true
            # Only process messages that were from an aircraft - determined by the presence (from aircraft) or lack of (from ground) a flight number.
            FromAircraft: true
            # Only process messages that have the "More" flag set.
            More: true
            # Only process messages that came from aircraft further than this many nautical miles away (requires ADS-B or tar1090).
            AboveDistanceNm: 15.5
            # Only process messages that came from aircraft closer than this many nautical miles away (requires ADS-B or tar1090).
            BelowDistanceNm: 15.5
            # Only process messages that came from aircraft further than this many miles away (requires ADS-B or tar1090).
            AboveDistanceMi: 15.5
            # Only process messages that came from aircraft closer than this many miles away (requires ADS-B or tar1090).
            BelowDistanceMi: 15.5
            # Only process messages that have the "Emergency" flag set.
            Emergency: true
            # Only process messages that have at least this many valid dictionary words in a row.
            DictionaryPhraseLengthMinimum: 5
            # Only process messages that have common freetext terms in them
            FreetextTermPresent: true
            # Only process ACARS messages that are at least this percent (ex: 0.8 for 80 percent) different than any other message received.
            PreviousMessageSimilarity:
                Similarity: 0.9
                MaximumLookBehind: 100
                DontFilterIfLonger: true
        # Use Ollama (which can be self-hosted) to choose to filter messages based on plain-text criteria.
        Ollama:
            # Whether to filter messages where Ollama itself fails. Recommended if your ollama instance sometimes returns errors.
            FilterOnFailure: true
            # Model to use (you need to pull this in Ollama to use it).
            Model: llama3.2
            # URL to the Ollama instance to use (include protocol and port).
            URL: http://ollama-service:11434
            # Override the system prompt (not usually necessary). This instructs Ollama how to behave with user prompts (ex: pretend you are a pirate. all answers must end in "arrr!"). This might make other options less effective.
            SystemPrompt: Answer like a pirate
            # Instructions for Ollama for processing messages. More detail produces better results.
            UserPrompt: Tell the LLM how to handle the message
            # Maximum number of retries to make against the Ollama URL.
            MaxRetryAttempts: 5
            # How long to wait before retrying the Ollama API.
            MaxRetryDelaySeconds: 5
            # How long to wait until giving up on any request to Ollama.
            Timeout: 5
            # Options to pass to the model
            Options:
                - # Option name, specific to the model you are using.
                  Name: num_predict
                  # Value for this particular option, any value is allowed.
                  Value: 512
        # Use OpenAI to choose to filter messages based on plain-text criteria.
        OpenAI:
            # Whether to filter messages where the OpenAI filter itself fails. Recommended if your ollama instance sometimes returns errors.
            FilterOnFailure: true
            APIKey: example_key
            # Model to use.
            Model: gpt-4o
            # Instructions for OpenAI model to use when filtering messages. More detail is better.
            UserPrompt: Does this message talk about coffee makers or lavatories (shortand LAV is sometimes used)?
            # Override the built-in system prompt to instruct the model on how to behave for requests (not usually necessary).
            SystemPrompt: Answer like a pirate
            # How long to wait until giving up on any request to OpenAI.
            Timeout: 5
      # Add annotations from one or more annotators in this step
      Annotate:
        # Look up geolocation, including distance from a reference point to aircraft, from a tar1090 instance (which can be self-hosted)
        Tar1090:
            # URL to your tar1090 instance
            URL: http://tar1090/
            # Geolocation to use for distance calculations (LAT,LON).
            ReferenceGeolocation: 35.6244416,139.7753782
            # Only return these fields when done.
            SelectedFields:
                - AircraftDistanceKm
                - AircraftDistanceMi
                - AircraftGeolocation
                - AircraftGeolocationLatitude
                - AircraftGeolocationLongitude
                - Messages
                - Now
                - ReferenceGeolocation
                - ReferenceGeolocationLatitude
                - ReferenceGeolocationLongitude
                - aircraft_distance_km
                - aircraft_distance_mi
                - aircraft_geolocation
                - aircraft_latitude
                - aircraft_longitude
        # Use Ollama (which can be self-hosted) to annotate messages, such as to answer custom questions about the message ("Is this message about coffee makers?").
        Ollama:
            # Model to use (you need to pull this in Ollama to use it).
            Model: llama3.2
            # URL to the Ollama instance to use (include protocol and port).
            URL: http://ollama-service:11434
            # Override the system prompt (not usually necessary). This instructs Ollama how to behave with user prompts (ex: pretend you are a pirate. all answers must end in "arrr!"). This might make other options less effective.
            SystemPrompt: Answer like a pirate
            # Instructions for Ollama for processing messages. More detail produces better results.
            UserPrompt: Tell the LLM how to handle the message
            # Maximum number of retries to make against the Ollama URL.
            MaxRetryAttempts: 5
            # How long to wait before retrying the Ollama API.
            MaxRetryDelaySeconds: 5
            # How long to wait until giving up on any request to Ollama.
            Timeout: 5
            # Options to pass to the model
            Options:
                - # Option name, specific to the model you are using.
                  Name: num_predict
                  # Value for this particular option, any value is allowed.
                  Value: 512
            # If there is a question in the user prompt, this controls whether to use the answer to filter the message.
            FilterWithQuestion: true
            # Any number calculation less than this will be filtered.
            FilterLessThan: 1
            # Any number calculation greater than this will be filtered.
            FilterGreaterThan: 100
            # Only return these fields when done.
            SelectedFields:
                - ModelFeedback
                - ProcessedNumber
                - ProcessedText
                - Question
                - llm_number_result
                - llm_question
                - llm_response
                - llm_string_result
        # Look up geolocation, including distance from a reference point to aircraft, from ADSB-Exchange
        ADSB:
            # APIKey provided by signing up at ADSB-Exchange.
            APIKey: example_key
            # Geolocation to use for distance calculations (LAT,LON).
            ReferenceGeolocation: 35.6244416,139.7753782
            # Only return these fields when done.
            SelectedFields:
                - APITimestamp
                - AircraftDistanceKm
                - AircraftDistanceMi
                - AircraftGeolocation
                - AircraftGeolocationLatitude
                - AircraftGeolocationLongitude
                - CacheTime
                - Message
                - ReferenceGeolocation
                - ReferenceGeolocationLatitude
                - ReferenceGeolocationLongitude
                - ServerProcessingTime
                - TotalAircraftResults
                - aircraft_distance_km
                - aircraft_distance_mi
                - aircraft_geolocation
                - aircraft_latitude
                - aircraft_longitude
      # Send the message to one or more receivers in this step
      Send:
        # Send messages to a Discord channel using a webhook created from that channel.
        Discord:
            # Full URL to the Discord webhook for a channel (edit a channel in the Discord UI for the option to create a webhook).
            URL: https://discord.com/api/webhooks/1234321/unique_id1234
            # Should an embed be sent instead of a simpler message?
            Embed: true
            # Pick one or more fields that deterministically determines the embed color
            EmbedColorFacetFields:
                - acarsAircraftTailCode
            # Pick one or more fields that determines the embed color according to this field, which should be an integer between 1 and 100
            EmbedColorGradientField: ollamaProcessedNumber
            # An array of colors that corresponds with EmbedColorGradientField values
            EmbedColorGradientSteps:
                - R: 0
                  G: 255
                  B: 0
                - R: 255
                  G: 255
                  B: 0
                - R: 255
                  G: 0
                  B: 0
            # Surround fields with message content with backticks so they are monospaced and stand out.
            FormatText: true
            # Add Discord-specific formatting to show human-readable instants from timestamps
            FormatTimestamps: true
            # Require a specific field to be populated or else no message will be sent
            RequiredFields:
                - acarsMessageText
        # Send messages to NewRelic as a custom event type.
        NewRelic:
            # API License key to use New Relic.
            APIKey: api_key
            # Name for the custom event type to create (example if set to "MyCustomACARSEvents": `FROM MyCustomACARSEvents SELECT count(timestamp)`). If not provided, it will be `CustomACARS`.
            CustomEventType: CustomACARS
        # Generic webhook receiver. Please read README for how to use custom payloads.
        Webhook:
            # URL, including port and params, to the desired webhook.
            URL: https://webhook:8443/webhook/?enable_feature=yes
            # Method when calling webhook (GET,POST,PUT etc).
            Method: POST
            # Additional headers to send along with the request.
            Headers:
                - # Header name.
                  Name: APIKey
                  # Header value.
                  Value: 1234abcdef
